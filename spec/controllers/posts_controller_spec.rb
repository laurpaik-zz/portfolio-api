#frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PostsController do

  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PostsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def post_params
    {
      title: 'blah',
      body: 'blahblah',
      date_posted: '2017-06-12'
    }
  end

  def firstPost
    Post.first
  end

  before(:all) do
    Post.create!(post_params)
  end

  after(:all) do
    Post.delete_all
  end

  describe 'GET #index' do
    # it "assigns all posts as @posts" do
    #   post = Post.create! valid_attributes
    #   get :index, params: {}, session: valid_session
    #   expect(assigns(:posts)).to eq([post])
    # end
    before(:each) { get :index }

    it 'is successful' do
      expect(response.status).to eq(200)
    end

    it 'renders a JSON response' do
      posts_collection = JSON.parse(response.body)['posts']
      expect(posts_collection).not_to be_nil
      expect(posts_collection.first['title']).to eq(firstPost.title)
    end
  end

  describe 'GET #show' do
    before(:each) { get :show, params: { id: firstPost.id } }
    # it "assigns the requested post as @post" do
    #   post = Post.create! valid_attributes
    #   get :show, params: {id: post.to_param}, session: valid_session
    #   expect(assigns(:post)).to eq(post)
    # end

    it 'is successful' do
      expect(response.status).to eq(200)
    end

    it 'renders a JSON response' do
      post_wanted = JSON.parse(response.body)['post']
      expect(post_wanted).not_to be_nil
      expect(post_wanted['id']).to eq(firstPost['id'])
      expect(post_wanted['title']).to eq(firstPost['title'])
    end
  end

  # describe "GET #new" do
  #   it "assigns a new post as @post" do
  #     get :new, params: {}, session: valid_session
  #     expect(assigns(:post)).to be_a_new(Post)
  #   end
  # end

  # describe "GET #edit" do
  #   it "assigns the requested post as @post" do
  #     post = Post.create! valid_attributes
  #     get :edit, params: {id: post.to_param}, session: valid_session
  #     expect(assigns(:post)).to eq(post)
  #   end
  # end

  describe "POST #create" do
    def post_new
      {
        title: 'Never Gonna',
        body: 'Give You Up',
        date_posted: '2017-06-14'
      }
    end

    before(:each) do
      post :create, params: { post: post_new }, format: :json
    end

    it 'is successful' do
      expect(response.status).to eq(201)
    end

    it 'renders a JSON response' do
      post_response = JSON.parse(response.body)
      expect(post_response).not_to be_nil
    end
    # context "with valid params" do
    #   it "creates a new Post" do
    #     expect {
    #       post :create, params: {post: valid_attributes}, session: valid_session
    #     }.to change(Post, :count).by(1)
    #   end
    #
    #   it "assigns a newly created post as @post" do
    #     post :create, params: {post: valid_attributes}, session: valid_session
    #     expect(assigns(:post)).to be_a(Post)
    #     expect(assigns(:post)).to be_persisted
    #   end
    #
    #   it "redirects to the created post" do
    #     post :create, params: {post: valid_attributes}, session: valid_session
    #     expect(response).to redirect_to(Post.last)
    #   end
    # end
    #
    # context "with invalid params" do
    #   it "assigns a newly created but unsaved post as @post" do
    #     post :create, params: {post: invalid_attributes}, session: valid_session
    #     expect(assigns(:post)).to be_a_new(Post)
    #   end
    #
    #   it "re-renders the 'new' template" do
    #     post :create, params: {post: invalid_attributes}, session: valid_session
    #     expect(response).to render_template("new")
    #   end
    # end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested post" do
        post = Post.create! valid_attributes
        put :update, params: {id: post.to_param, post: new_attributes}, session: valid_session
        post.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested post as @post" do
        post = Post.create! valid_attributes
        put :update, params: {id: post.to_param, post: valid_attributes}, session: valid_session
        expect(assigns(:post)).to eq(post)
      end

      it "redirects to the post" do
        post = Post.create! valid_attributes
        put :update, params: {id: post.to_param, post: valid_attributes}, session: valid_session
        expect(response).to redirect_to(post)
      end
    end

    context "with invalid params" do
      it "assigns the post as @post" do
        post = Post.create! valid_attributes
        put :update, params: {id: post.to_param, post: invalid_attributes}, session: valid_session
        expect(assigns(:post)).to eq(post)
      end

      it "re-renders the 'edit' template" do
        post = Post.create! valid_attributes
        put :update, params: {id: post.to_param, post: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'is successful' do
      post_id = firstPost.id
      delete :destroy, params: { id: firstPost.id }
      expect { Post.find(post_id) }
        .to raise_error(ActiveRecord::RecordNotFound)
    end

    it 'returns an empty response' do
      delete :destroy, params: { id: firstPost.id }
      expect(response.status).to eq(204)
      expect(response.body).to be_empty
    end
    # it "destroys the requested post" do
    #   post = Post.create! valid_attributes
    #   expect {
    #     delete :destroy, params: {id: post.to_param}, session: valid_session
    #   }.to change(Post, :count).by(-1)
    # end

    # it "redirects to the posts list" do
    #   post = Post.create! valid_attributes
    #   delete :destroy, params: {id: post.to_param}, session: valid_session
    #   expect(response).to redirect_to(posts_url)
    # end
  end
end
